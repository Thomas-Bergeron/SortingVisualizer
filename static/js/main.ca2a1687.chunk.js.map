{"version":3,"sources":["SortingAlgorithms/SortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortEvents","array","animations","mergeSort","startIndex","endIndex","middleIndex","Math","floor","mergedArray","i","usedLeft","j","push","length","mergeArrays","slice","getQuickSortEvents","quickSort","p","k","pivotIndex","pivot","swap","partition","getHeapSortEvents","nbElements","start","element","siftDown","heapify","end","heapSort","root","indexLeftHeap","child","swapIndex","firstIndex","secondIndex","temp","getBubbleSortEvents","bubbleSort","isSorted","algorithms","delay","ms","Promise","res","setTimeout","SortingVisualizer","props","state","sleep","isAnimated","algorithm","this","generateArray","min","max","random","setState","SortingAlgorithms","arrayBars","document","getElementsByClassName","barOneId","barTwoId","color","style","backgroundColor","removeIndex","addIndex","value","tempArray","splice","animation","value1","value2","event","target","id","className","map","index","key","height","onClick","disabled","type","defaultValue","onInput","parseFloat","MAX_SLEEP_TIME","toFixed","name","checked","onChange","handleRadioEvent","htmlFor","sort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ca2a1687.chunk.js","sourcesContent":["// calls the mergeSort and returns the animations array\r\nexport function getMergeSortEvents(array) {\r\n\tconst animations = [];\r\n\tmergeSort(array.slice(), 0, array.length - 1, animations);\r\n\treturn [animations];\r\n};\r\n\r\n// mergeSort function\r\nfunction mergeSort(array, startIndex, endIndex, animations) {\r\n\t// only one element so no need to sort anymore\r\n\tif (startIndex === endIndex) {\r\n\t\treturn array;\r\n\t} else {\r\n\t\t// finds the middleIndex of the array\r\n\t\tconst middleIndex = Math.floor((startIndex + endIndex) / 2);\r\n\r\n\t\t//mergeSort the left and right parts of the array\r\n\t\tmergeSort(array, startIndex, middleIndex, animations);\r\n\t\tmergeSort(array, middleIndex + 1, endIndex, animations);\r\n\r\n\t\t// return the left and right arrays merged together\r\n\t\treturn mergeArrays(array, startIndex, middleIndex, endIndex, animations);\r\n\t}\r\n}\r\n\r\n// merges two arrays in sorted order\r\nfunction mergeArrays(array, startIndex, middleIndex, endIndex, animations) {\r\n\tlet mergedArray = [];\r\n\tlet i = startIndex;\r\n\tlet usedLeft = 0;\r\n\tlet j = middleIndex + 1;\r\n\r\n\t// not at the end of the left or right part\r\n\twhile (i <= middleIndex && j <= endIndex) {\r\n\t\t// compare the left and the right indexes value\r\n\t\tanimations.push([i + mergedArray.length - usedLeft, j ]);\r\n\t\tanimations.push([i + mergedArray.length - usedLeft, j ]);\r\n\t\tif (array[i] <= array[j]) {\r\n\t\t\t// put i value in the sorted array\r\n\t\t\tanimations.push([i + mergedArray.length - usedLeft++, mergedArray.length + startIndex, array[i]]);\r\n\t\t\tmergedArray.push(array[i++]);\r\n\t\t} else {\r\n\t\t\t// put j value in the sorted array\r\n\t\t\tanimations.push([j, mergedArray.length + startIndex, array[j]]);\r\n\t\t\tmergedArray.push(array[j++]);\r\n\t\t}\r\n\t}\r\n\t\r\n\twhile (i <= middleIndex) {\r\n\t\t// put every remaining values from the left side in the sorted array\r\n\t\tanimations.push([i + mergedArray.length - usedLeft, i + mergedArray.length - usedLeft]);\r\n\t\tanimations.push([i + mergedArray.length - usedLeft, i + mergedArray.length - usedLeft]);\r\n\t\tanimations.push([i + mergedArray.length - usedLeft++, mergedArray.length + startIndex, array[i]]);\r\n\t\tmergedArray.push(array[i++]);\r\n\t}\r\n\t\r\n\twhile (j <= endIndex) {\r\n\t\t// put every remaining values from the right side in the sorted array\r\n\t\tanimations.push([j, j]);\r\n\t\tanimations.push([j, j]);\r\n\t\tanimations.push([j, mergedArray.length + startIndex, array[j]]);\r\n\t\tmergedArray.push(array[j++]);\r\n\t}\r\n\t\r\n\t// place the sorted elements into the original array\r\n\tfor (let i = startIndex; i <= endIndex; i++) {\r\n\t\tarray[i] = mergedArray[i - startIndex];\r\n\t}\r\n\t\r\n\treturn array;\r\n}\r\n\r\n// calls the quickSort and returns the animations array\r\nexport function getQuickSortEvents(array) {\r\n\tconst animations = [];\r\n\tquickSort(array.slice(), 0, array.length - 1, animations);\r\n\treturn [animations];\r\n};\r\n\r\n// quickSort function\r\nfunction quickSort(array, startIndex, endIndex, animations) {\r\n\t// only one element, already sorted\r\n\tif (startIndex >= endIndex) return;\r\n\r\n\t// partition the entire array\r\n\tconst p = partition(array, startIndex, endIndex, animations);\r\n\r\n\t// quicksort left and right part of the partition middle element\r\n\tquickSort(array, startIndex, p - 1, animations);\r\n\tquickSort(array, p, endIndex, animations);\r\n}\r\n\r\n// selects the middle element as a pivot value and puts all higher values to the right and lower values to the left\r\nfunction partition(array, startIndex, endIndex, animations){\r\n\tvar i = startIndex;\r\n\tvar j = endIndex;\r\n\r\n\t// sets entire array as yellow in animation\r\n\tfor (let k = startIndex; k <= endIndex; k++) {\r\n\t\tanimations.push([1, k]);\r\n\t}\r\n\t\r\n\t// selects the middle element as pivot index\r\n\tvar pivotIndex = Math.floor((i + j) / 2);\r\n\t// sets the index red in the animation\r\n\tanimations.push([2, pivotIndex])\r\n\t// save the pivot value (important when the value changes place,\r\n\t// you still need to compare to the same value, not the new one)\r\n\tconst pivot = array[pivotIndex];\r\n\r\n\t\r\n\twhile (i <= j) {\r\n\t\t// set comparing indexes to comparing color\r\n\t\tanimations.push([3, i]);\r\n\t\tanimations.push([3, j]);\r\n\r\n\t\t// find the first element greater than pivot from the left side\r\n\t\twhile (array[i] < pivot) {\r\n\t\t\t// set the index at normal color\r\n\t\t\tanimations.push([0, i]);\r\n\t\t\ti++;\r\n\t\t\t// set the comparing color to the new index\r\n\t\t\tanimations.push([3, i])\r\n\t\t}\r\n\t\t\r\n\t\t// find the first element lower than pivot from the right side\r\n\t\twhile (array[j] > pivot) {\r\n\t\t\t// set the index at normal color\r\n\t\t\tanimations.push([0, j]);\r\n\t\t\tj--;\r\n\t\t\t// set the comparing color to the new index\r\n\t\t\tanimations.push([3, j]);\r\n\t\t}\r\n\t\t\r\n\t\t// new elements, needs swap\r\n\t\tif (i <= j){\r\n\t\t\t// set indexes to regular color\r\n\t\t\tanimations.push([0, i]);\r\n\t\t\tanimations.push([0, j]);\r\n\r\n\t\t\t// add animation to swap elements\r\n\t\t\tanimations.push([4, i, j]);\r\n\t\t\t// swap elements\r\n\t\t\tswap(array, i, j);\r\n\t\t\t// increment elements\r\n\t\t\ti++;\r\n\t\t\tj--;\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (i < array.length) {\r\n\t\t// return i index to regular color\r\n\t\tanimations.push([0, i]);\r\n\t}\r\n\t\r\n\tif (j > 0) {\r\n\t\t// return j index to regular color\r\n\t\tanimations.push([0, j]);\r\n\t}\r\n\r\n\t// returns pivot index\r\n\treturn i;\r\n}\r\n\r\n// calls the heapSort and returns the animation array\r\nexport function getHeapSortEvents(array) {\r\n\tconst animations = [];\r\n\theapSort(array.slice(), array.length, animations);\r\n\treturn [animations];\r\n}\r\n\r\n// heapSort function\r\nfunction heapSort(array, nbElements, animations) {\r\n\t// place the elements in a binary tree\r\n\theapify(array, nbElements, animations);\r\n\t\r\n\t// starts iterating from the end\r\n\tlet end = nbElements - 1;\r\n\twhile (end > 0) {\r\n\t\tanimations.push([2, 0, end]);\r\n\t\tswap(array, end, 0);\r\n\t\tend--;\r\n\t\tsiftDown(array, 0, end, animations);\r\n\t}\r\n}\r\n\r\n// places elements of the array in a binary tree\r\nfunction heapify(array, nbElements, animations) {\r\n\t// start from the parent of the last element\r\n\tlet start = indexParentHeap(nbElements - 1);\r\n\twhile (start >= 0) {\r\n\t\t// \r\n\t\tsiftDown(array, start--, nbElements - 1, animations);\r\n\t}\r\n}\r\n\r\n// puts the first element at the right place in the array\r\nfunction siftDown(array, start, end, animations) {\r\n\tlet root = start;\r\n\twhile (indexLeftHeap(root) <= end) {\r\n\t\tlet child = indexLeftHeap(root);\r\n\t\tlet swapIndex = root;\r\n\t\t// compare the two values\r\n\t\tanimations.push([1, swapIndex]);\r\n\t\tanimations.push([1, child]);\r\n\t\tanimations.push([0, swapIndex]);\r\n\t\tanimations.push([0, child]);\r\n\t\tif (array[swapIndex] < array[child]) {\r\n\t\t\t// the child is greater so it needs to go up in the tree\r\n\t\t\tswapIndex = child;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif (child + 1 <= end && array[swapIndex] < array[child + 1]) {\r\n\t\t\t// right heap is greater than left heap\r\n\t\t\tanimations.push([1, swapIndex]);\r\n\t\t\tanimations.push([1, child + 1]);\r\n\t\t\tanimations.push([0, swapIndex]);\r\n\t\t\tanimations.push([0, child + 1]);\r\n\t\t\tswapIndex = child + 1;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tanimations.push([1, swapIndex]);\r\n\t\tanimations.push([1, root]);\r\n\t\tanimations.push([0, swapIndex]);\r\n\t\tanimations.push([0, root]);\r\n\t\tif (swapIndex === root) {\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\t// put the biggest element at the highest place\r\n\t\t\tanimations.push([2, root, swapIndex]);\r\n\t\t\tswap(array, root, swapIndex);\r\n\t\t\troot = swapIndex;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// returns the index of the parent of an element\r\nfunction indexParentHeap(element) {\r\n\treturn Math.floor((element - 1) / 2);\r\n}\r\n\r\n// returns the index of the left heap of a parent element\r\nfunction indexLeftHeap(element) {\r\n\treturn 2 * element + 1;\r\n}\r\n\r\n// swaps two elements of an array\r\nfunction swap(array, firstIndex, secondIndex) {\r\n\tlet temp = array[firstIndex];\r\n\tarray[firstIndex] = array[secondIndex];\r\n\tarray[secondIndex] = temp;\r\n}\r\n\r\n// calls the bubbleSort and returns the animation array\r\nexport function getBubbleSortEvents(array) {\r\n\tconst animations = [];\r\n\tbubbleSort(array.slice(), array.length, animations);\r\n\treturn [animations];\r\n}\r\n\r\n// bubbleSort function\r\nfunction bubbleSort(array, length, animations) {\r\n\tlet isSorted = true;\r\n\t\r\n\t// loop through all elements\r\n\tfor (let i = 0; i < length - 1; i++) {\r\n\t\tanimations.push([1, i, i + 1]);\r\n\t\tanimations.push([0, i, i + 1]);\r\n\t\tif (array[i] > array[i + 1]) {\r\n\t\t\t// left element greater than right one so we swap\r\n\t\t\tisSorted = false;\r\n\t\t\tanimations.push([2, i, i + 1]);\r\n\t\t\tswap(array, i, i + 1);\r\n\t\t}\r\n\t}\r\n\r\n\t// call the funciton if the array is not sorted yet\r\n\tif (!isSorted) {\r\n\t\tbubbleSort(array, length - 1, animations);\r\n\t}\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport * as SortingAlgorithms from '../SortingAlgorithms/SortingAlgorithms.js'\r\n\r\n\r\n// Constants related to array elements\r\nconst NB_ELEMENTS_INIT = 50;\r\nconst MIN_ELEMENTS = 5;\r\nconst MAX_ELEMENTS = 100;\r\nconst MIN_ELEMENT_VALUE = 5;\r\nconst MAX_ELEMENT_VALUE = 900;\r\n\r\n// Constants related to sleep\r\nconst DEFAULT_SLEEP_TIME = 10;\r\nconst MIN_SLEEP_TIME = 0;\r\nconst MAX_SLEEP_TIME = 500;\r\n\r\n// Enum of all possible algorithms\r\nconst algorithms = {\r\n\tMERGE: 0,\r\n\tQUICK: 1,\r\n\tHEAP: 2,\r\n\tBUBBLE: 3,\r\n}\r\n\r\nexport class SortingVisualizer extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tarray: [],\r\n\t\t\tsleep: DEFAULT_SLEEP_TIME,\r\n\t\t\tisAnimated: false,\r\n\t\t\talgorithm: algorithms.MERGE,\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t// Generate first array\r\n\t\tthis.generateArray(NB_ELEMENTS_INIT);\r\n\t}\r\n\r\n\t// Generates an array of nbElements with values between MIN_ELEMENT_VALUE and MAX_ELEMENT_VALUE\r\n\tgenerateArray(nbElements) {\r\n\t\tconst array = [];\r\n\t\t// Loop through all elements\r\n\t\tfor (let i = 0; i < nbElements; i++) {\r\n\t\t\t// Sets the element to a random value\r\n\t\t\tarray.push(randomIntFromInterval(MIN_ELEMENT_VALUE, MAX_ELEMENT_VALUE));\r\n\t\t}\r\n\t\tthis.setState({array});\r\n\t}\r\n\t\r\n\t// handles mergeSort animation\r\n\tasync mergeSort() {\r\n\t\t// array containing other arrays that each represent an animation\r\n\t\tconst [animations] = SortingAlgorithms.getMergeSortEvents(this.state.array);\r\n\t\t// to manipulate bars\r\n\t\tconst arrayBars = document.getElementsByClassName('array-bar');\r\n\t\t\r\n\t\t// start the animation\r\n\t\tthis.setState({isAnimated: true});\r\n\r\n\t\t// loop through all animations\r\n\t\tfor (let i = 0; i < animations.length; i++) {\r\n\t\t\t// first two animations are color change and the third is a swap\r\n\t\t\tconst isColorChange = i % 3 !== 2;\r\n\r\n\t\t\tif (isColorChange) {\r\n\t\t\t\t// get the bar IDs from an array in animation\r\n\t\t\t\tconst [barOneId, barTwoId] = animations[i];\r\n\t\t\t\t// first color change is red, second is lightblue\r\n\t\t\t\tconst color = i % 3 === 0 ? 'red': 'lightblue';\r\n\t\t\t\t// change bar color\r\n\t\t\t\tarrayBars[barOneId].style.backgroundColor = color;\r\n\t\t\t\tarrayBars[barTwoId].style.backgroundColor = color;\r\n\t\t\t\t// delay of the current sleep time\r\n\t\t\t\tawait delay(this.state.sleep);\r\n\t\t\t} else {\r\n\t\t\t\t// get the information from the animation array\r\n\t\t\t\tconst [removeIndex, addIndex, value] = animations[i];\r\n\t\t\t\t\r\n\t\t\t\t// change the element position\r\n\t\t\t\tconst tempArray = this.state.array.slice();\r\n\t\t\t\ttempArray.splice(removeIndex, 1);\r\n\t\t\t\ttempArray.splice(addIndex, 0, value);\r\n\t\t\t\tthis.setState({array: tempArray});\r\n\r\n\t\t\t\t// delay of the current sleep time\r\n\t\t\t\tawait delay(this.state.sleep);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// end the animation\r\n\t\tthis.setState({isAnimated: false});\r\n\t}\r\n\t\r\n\t// handles quickSort animatoin\r\n\tasync quickSort() {\r\n\t\t// array containing other arrays that each represent an animation\r\n\t\tconst [animations] = SortingAlgorithms.getQuickSortEvents(this.state.array);\r\n\t\t// to manipulate bars\r\n\t\tconst arrayBars = document.getElementsByClassName('array-bar');\r\n\t\t\r\n\t\t// start the animation\r\n\t\tthis.setState({isAnimated: true});\r\n\r\n\t\t// loop through all the animations\r\n\t\tfor (let i = 0; i < animations.length; i++) {\r\n\t\t\t// get information from the animation array\r\n\t\t\tconst [animation, barOneId, barTwoId] = animations[i];\r\n\t\t\t\r\n\t\t\t// animation is a swap\r\n\t\t\tif (animation === 4) {\r\n\t\t\t\t// swap the elements\r\n\t\t\t\tlet tempArray = this.state.array.slice();\r\n\t\t\t\tthis.swap(tempArray, barOneId, barTwoId);\r\n\t\t\t\tthis.setState({array: tempArray});\r\n\t\t\t\t\r\n\t\t\t\t// delay of the current sleep time\r\n\t\t\t\tawait delay(this.state.sleep);\r\n\t\t\t} else {\r\n\t\t\t\t// select color to use\r\n\t\t\t\tlet color = animation === 1 ? 'yellow' : animation === 2 ? 'red' : animation === 3 ? 'blue' : animation === 5 ? 'orange' : 'lightblue';\r\n\t\t\t\t\r\n\t\t\t\t// change bar color\r\n\t\t\t\tarrayBars[barOneId].style.backgroundColor = color;\r\n\t\t\t\t\r\n\t\t\t\t// delay of the current sleep time if the color is blue\r\n\t\t\t\tif (color === 'blue') {\r\n\t\t\t\t\tawait delay(this.state.sleep);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// end of animation\r\n\t\tthis.setState({isAnimated: false});\r\n\t}\r\n\t\r\n\t// handles heapSort animation\r\n\tasync heapSort() {\r\n\t\t// array containing other arrays that each represent an animation\r\n\t\tconst [animations] = SortingAlgorithms.getHeapSortEvents(this.state.array);\r\n\t\t// to manipulate bars\r\n\t\tconst arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n\t\t// start of animation\r\n\t\tthis.setState({isAnimated: true});\r\n\r\n\t\t// loop through all the animations\r\n\t\tfor (let i = 0; i < animations.length; i++) {\r\n\t\t\t// get information from animation array\r\n\t\t\tconst [animation, barOneId, barTwoId] = animations[i];\r\n\r\n\t\t\t// animation is a swap\r\n\t\t\tif (animation === 2) {\r\n\t\t\t\t// swap elements\r\n\t\t\t\tlet tempArray = this.state.array.slice();\r\n\t\t\t\tthis.swap(tempArray, barOneId, barTwoId);\r\n\t\t\t\tthis.setState({array: tempArray});\r\n\t\t\t\tawait delay(this.state.sleep);\r\n\t\t\t} else {\r\n\t\t\t\t// select color to use\r\n\t\t\t\tlet color = animation === 1 ? 'red' : 'lightblue';\r\n\r\n\t\t\t\t// change bar color\r\n\t\t\t\tarrayBars[barOneId].style.backgroundColor = color;\r\n\r\n\t\t\t\t// delay of the current sleep time if the color is red\r\n\t\t\t\tif (color === 'red') {\r\n\t\t\t\t\tawait delay(this.state.sleep);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// end of animation\r\n\t\tthis.setState({isAnimated: false});\r\n\t}\r\n\r\n\tasync bubbleSort() {\r\n\t\t// array containing other arrays that each represent an animation\r\n\t\tconst [animations] = SortingAlgorithms.getBubbleSortEvents(this.state.array);\r\n\t\t// to manipulate bars\r\n\t\tconst arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n\t\t// start of animation\r\n\t\tthis.setState({isAnimated: true});\r\n\r\n\t\t// loop through all animations\r\n\t\tfor (let i = 0; i < animations.length; i++) {\r\n\t\t\t// get information from animation array\r\n\t\t\tconst [animation, barOneId, barTwoId] = animations[i];\r\n\r\n\t\t\t// animation is a swap\r\n\t\t\tif (animation === 2) {\r\n\t\t\t\t// swap the elements\r\n\t\t\t\tlet tempArray = this.state.array.slice();\r\n\t\t\t\tthis.swap(tempArray, barOneId, barTwoId);\r\n\t\t\t\tthis.setState({array: tempArray});\r\n\r\n\t\t\t\t// delay of the current sleep time\r\n\t\t\t\tawait delay(this.state.sleep);\r\n\t\t\t} else {\r\n\t\t\t\t// select color to use\r\n\t\t\t\tlet color = animation === 1 ? 'red' : 'lightblue';\r\n\r\n\t\t\t\t// change bar color\r\n\t\t\t\tarrayBars[barOneId].style.backgroundColor = color;\r\n\t\t\t\tarrayBars[barTwoId].style.backgroundColor = color;\r\n\r\n\t\t\t\t// delay of current sleep time if color is red\r\n\t\t\t\tif (color === 'red') {\r\n\t\t\t\t\tawait delay(this.state.sleep);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// end of animation\r\n\t\tthis.setState({isAnimated: false});\r\n\t}\r\n\r\n\t// swap two elements in an array and \r\n\tswap(array, firstIndex, secondIndex) {\r\n\t\tlet value1 = array[firstIndex];\r\n\t\tlet value2 = array[secondIndex];\r\n\t\tarray.splice(firstIndex, 1);\r\n\t\tarray.splice(firstIndex, 0, value2);\r\n\t\tarray.splice(secondIndex, 1);\r\n\t\tarray.splice(secondIndex, 0, value1);\r\n\t}\r\n\r\n\t// selects the current sorting algorithm and calls the correct method to animate\r\n\tsort() {\r\n\t\tswitch (this.state.algorithm) {\r\n\t\t\tcase algorithms.MERGE:\r\n\t\t\t\tthis.mergeSort();\r\n\t\t\t\tbreak;\r\n\t\t\tcase algorithms.QUICK:\r\n\t\t\t\tthis.quickSort();\r\n\t\t\t\tbreak;\r\n\t\t\tcase algorithms.HEAP:\r\n\t\t\t\tthis.heapSort();\r\n\t\t\t\tbreak;\r\n\t\t\tcase algorithms.BUBBLE:\r\n\t\t\t\tthis.bubbleSort();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t// allows to change the selected algorithm and radio button\r\n\thandleRadioEvent(event){\r\n\t\tswitch (event.target.id){\r\n\t\t\tcase \"merge\":\r\n\t\t\t\tthis.setState({algorithm: algorithms.MERGE});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"quick\":\r\n\t\t\t\tthis.setState({algorithm: algorithms.QUICK});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"heap\":\r\n\t\t\t\tthis.setState({algorithm: algorithms.HEAP});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"bubble\":\r\n\t\t\t\tthis.setState({algorithm: algorithms.BUBBLE});\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\t\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {array, sleep, isAnimated} = this.state;\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"whole-page\">\r\n\t\t\t\t<div className=\"array-container\">\r\n\t\t\t\t{array.map((value, index) => (\r\n\t\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"array-bar\"\r\n\t\t\t\t\tkey={index}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\theight: `${value/2}px`,\r\n\t\t\t\t\t\tbackgroundColor: 'lightblue',\r\n\t\t\t\t\t}}></div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div className=\"footer\">\r\n\t\t\t\t\t<button className=\"button text-button\" onClick={() => this.generateArray(this.state.array.length)} disabled={isAnimated}>Generate New Array</button>\r\n\r\n\t\t\t\t\t<div className=\"option-container\">\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<div className=\"slider-container\">\r\n\t\t\t\t\t\t\t\t<label>Array Size</label>\r\n\t\t\t\t\t\t\t\t<label>{array.length}</label>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"range\"\r\n\t\t\t\t\t\t\t\t\tid=\"sliderElements\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"slider\"\r\n\t\t\t\t\t\t\t\t\tdisabled={isAnimated}\r\n\t\t\t\t\t\t\t\t\tmin={MIN_ELEMENTS}\r\n\t\t\t\t\t\t\t\t\tmax={MAX_ELEMENTS}\r\n\t\t\t\t\t\t\t\t\tdefaultValue={NB_ELEMENTS_INIT}\r\n\t\t\t\t\t\t\t\t\tonInput={event => this.generateArray(event.target.value)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<div className=\"slider-container\">\r\n\t\t\t\t\t\t\t\t<label>Sorting Speed</label>\r\n\t\t\t\t\t\t\t\t<label>{parseFloat(((MAX_SLEEP_TIME - MIN_SLEEP_TIME - sleep) / (MAX_SLEEP_TIME - MIN_SLEEP_TIME) * 100).toFixed(1))} %</label>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"range\"\r\n\t\t\t\t\t\t\t\t\tid=\"sliderSleep\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"slider\"\r\n\t\t\t\t\t\t\t\t\tmin={MIN_SLEEP_TIME}\r\n\t\t\t\t\t\t\t\t\tmax={MAX_SLEEP_TIME}\r\n\t\t\t\t\t\t\t\t\tdefaultValue={MAX_SLEEP_TIME - DEFAULT_SLEEP_TIME + MIN_SLEEP_TIME}\r\n\t\t\t\t\t\t\t\t\tonInput={event => this.setState({sleep: MAX_SLEEP_TIME - event.target.value + MIN_SLEEP_TIME})}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"algorithm-container\">\r\n\t\t\t\t\t\t<input type=\"radio\" name=\"algorithms\" id=\"merge\" checked={this.state.algorithm === algorithms.MERGE}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {this.handleRadioEvent(event)}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={isAnimated}></input>\r\n\t\t\t\t\t\t\t<label htmlFor=\"merge\" className=\"algorithm-label algo1\">\r\n\t\t\t\t\t\t\t\t<span>Merge Sort</span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<input type=\"radio\" name=\"algorithms\" id=\"quick\" checked={this.state.algorithm === algorithms.QUICK}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {this.handleRadioEvent(event)}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={isAnimated}></input>\r\n\t\t\t\t\t\t\t<label htmlFor=\"quick\" className=\"algorithm-label algo2\">\r\n\t\t\t\t\t\t\t\t<span>Quick Sort</span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<input type=\"radio\" name=\"algorithms\" id=\"heap\" checked={this.state.algorithm === algorithms.HEAP}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {this.handleRadioEvent(event)}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={isAnimated}></input>\r\n\t\t\t\t\t\t\t<label htmlFor=\"heap\" className=\"algorithm-label algo3\">\r\n\t\t\t\t\t\t\t\t<span>Heap Sort</span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<input type=\"radio\" name=\"algorithms\" id=\"bubble\" checked={this.state.algorithm === algorithms.BUBBLE}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {this.handleRadioEvent(event)}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={isAnimated}></input>\r\n\t\t\t\t\t\t\t<label htmlFor=\"bubble\" className=\"algorithm-label algo4\">\r\n\t\t\t\t\t\t\t\t<span>Bubble Sort</span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button className=\"button round-button\" onClick={() => this.sort()} disabled={isAnimated}>Sort!</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\n// returns an int between the two provided values\r\nfunction randomIntFromInterval (min, max) {\r\n\treturn Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// delay the number of ms provided and returns when it's done\r\nfunction delay(ms) {\r\n\treturn new Promise(res => setTimeout(res, ms));\r\n}\r\n\r\nexport default SortingVisualizer;","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}